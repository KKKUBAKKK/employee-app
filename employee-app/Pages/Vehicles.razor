@page "/vehicles"
@using employeeapp.Dtos
@using employeeapp.Helpers
@using employeeapp.Services
@inject ICarService CarService
@* @attribute [Authorize] *@

<div class="page-header">
    <h1>Vehicle Fleet</h1>
    <button class="add-button">
        <i class="fas fa-plus"></i> Add New Vehicle
    </button>
</div>

<div class="card">
    <div class="filters">
        <div class="filter-group">
            <select class="filter-select" @onchange="async e => { _selectedCategory = (e.Value != null && e.Value.ToString() != String.Empty) ? Enum.Parse<CarType>(e.Value.ToString()):null; await ApplyFilters(); }">
                <option value="">All Categories</option>
                <option value="compact">Compact</option>
                <option value="economy">Economy</option>
                <option value="van">Van</option>
                <option value="suv">SUV</option>
            </select>
                
            <select class="filter-select" @onchange="async e => { _selectedStatus = (e.Value != null && e.Value.ToString() != String.Empty) ? Boolean.Parse(e.Value.ToString()):null; await ApplyFilters(); }">
                <option value="">All Statuses</option>
                <option value="true">Available</option>
                <option value="false">Rented</option>
            </select>

            <input type="text" placeholder="Search by model..." class="search-input" @onchange="async e => { _searchModel = (e.Value != null) ? e.Value.ToString():null; await ApplyFilters(); }"/>
        </div>
    </div>
</div>

<div class="vehicle-grid">
        
    @foreach (var vehicle in _currentVehicles)
    {
        <div class="vehicle-card">
            <div class="vehicle-image">
                <img src="@GetImageUrl(vehicle.Type)" alt="@vehicle.Model" />
                <div class="status-badge @(vehicle.IsAvailable ? "available" : "rented")">
                    @(vehicle.IsAvailable ? "Available" : "Rented")
                </div>
            </div>
            <div class="vehicle-info">
                <h3>@vehicle.Producer @vehicle.Model</h3>
                @* <p class="plate">@vehicle.LicensePlate</p> *@
                <div class="specs">
                    <span>
                        <i class="fas fa-car"></i> @vehicle.Type
                    </span>
                    <span>
                        <i class="fas fa-gas-pump"></i> @vehicle.NumberOfSeats
                    </span>
                    <span>
                        <i class="fas fa-tachometer-alt"></i> @vehicle.YearOfProduction
                    </span>
                </div>
            </div>
            <div class="vehicle-actions">
                <button class="action-btn">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button class="action-btn">
                    <i class="fas fa-history"></i> History
                </button>
                @* <button class="action-btn @(vehicle.IsAvailable ? "" : "disabled")"> *@
                @*     <i class="fas fa-key"></i> Rent Out *@
                @* </button> *@
            </div>
        </div>
    }

    <div class="pagination-controls">
        <button class="pagination-btn" @onclick="LoadPrevVehicles" disabled="@IsFirstPage">Previous Page</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button class="pagination-btn" @onclick="LoadNextVehicles" disabled="@IsLastPage">Next Page</button>
    </div>

    @code
    {
        private List<CarDto> _vehicles = new List<CarDto>();
        private List<CarDto> _filteredVehicles = new List<CarDto>();
        private List<CarDto> _currentVehicles = new List<CarDto>();
        private int _currentPage = 0;
        private int _totalPages = 0;
        private const int PageSize = 10;
        private int _firstVehicleIdx = 0;
        private int _lastVehicleIdx = 0;
        
        // private int lastVehicleId = 0;
        // private int firstVehicleId = 0;
        private CarType? _selectedCategory = null;
        private bool? _selectedStatus = null;
        private String _searchModel = "";
        
        protected override async Task OnInitializedAsync()
        {
            await LoadAllVehicles();
        }

        private async Task LoadAllVehicles()
        {
            var v = await CarService.GetAllCars();
            _vehicles = v.ToList();
            FilterVehicles();
            if (_filteredVehicles.Count == 0)
            {
                _totalPages = 0;
                _firstVehicleIdx = 0;
                _lastVehicleIdx = 0;
                _currentVehicles.Clear();
                return;
            }
            _currentPage = 1;
            _totalPages = (int)Math.Ceiling((double)_filteredVehicles.Count / PageSize);
            _firstVehicleIdx = 0;
            _lastVehicleIdx = (_filteredVehicles.Count > PageSize) ? PageSize - 1: _filteredVehicles.Count - 1;
            _currentVehicles = _filteredVehicles.GetRange(_firstVehicleIdx, _lastVehicleIdx - _firstVehicleIdx + 1);
        }
        
        private void FilterVehicles()
        {
            _filteredVehicles = _vehicles;
            if (_selectedCategory != null)
            {
                _filteredVehicles = _filteredVehicles.Where(v => v.Type == _selectedCategory).ToList();
            }
            {
                _filteredVehicles = _filteredVehicles.Where(v => v.Type == _selectedCategory).ToList();
            }
            if (_selectedStatus != null)
            {
                _filteredVehicles = _filteredVehicles.Where(v => v.IsAvailable == _selectedStatus).ToList();
            }
            if (!string.IsNullOrEmpty(_searchModel))
            {
                _filteredVehicles = _filteredVehicles.Where(v => v.Model.ToLower().Contains(_searchModel.ToLower())).ToList();
            }
        }
        
        private void LoadNextVehicles()
        {
            if (_currentPage == _totalPages)
            {
                return;
            }
            _currentVehicles.Clear();
            _firstVehicleIdx += PageSize;
            _lastVehicleIdx += PageSize;
            if (_lastVehicleIdx >= _filteredVehicles.Count)
                _lastVehicleIdx = _filteredVehicles.Count - 1;
            _currentVehicles = _filteredVehicles.GetRange(_firstVehicleIdx, _lastVehicleIdx - _firstVehicleIdx + 1);
            _currentPage++;
        }

        private void LoadPrevVehicles()
        {
            if (_currentPage <= 1)
            {
                return;
            }
            _currentVehicles.Clear();
            _firstVehicleIdx -= PageSize;
            _lastVehicleIdx -= PageSize;
            if (_firstVehicleIdx < 0)
                _firstVehicleIdx = 0;
            if (_lastVehicleIdx < PageSize - 1 && _filteredVehicles.Count > PageSize)
                _lastVehicleIdx = PageSize - 1;
            _currentVehicles = _filteredVehicles.GetRange(_firstVehicleIdx, _lastVehicleIdx - _firstVehicleIdx + 1);
            _currentPage--;
        }
        
        private async Task ApplyFilters()
        {
            _currentPage = 0;
            _firstVehicleIdx = 0;
            _lastVehicleIdx = 0;
            await LoadAllVehicles();
        }
        
        private bool IsFirstPage => _currentPage <= 1;
        private bool IsLastPage => _currentPage >= _totalPages;
        
        private string GetImageUrl(CarType type)
        {
            return type switch
            {
                CarType.compact => "Images/compact_clean.png",
                CarType.economy => "Images/economy_clean.png",
                CarType.van => "Images/van_clean.png",
                CarType.suv => "Images/suv_clean.png",
                _ => "Images/car-rental.png"
            };
        }
    }
</div>


<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .add-button {
        background-color: #2ecc71;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 1.5rem;
    }

    .filters {
        margin-bottom: 1.5rem;
    }

    .filter-group {
        display: flex;
        gap: 1rem;
    }

    .filter-select, .search-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        min-width: 150px;
    }

    .search-input {
        flex-grow: 1;
        max-width: 300px;
    }

    .vehicle-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .vehicle-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }

    .vehicle-image {
        position: relative;
        height: 200px;
    }

    .vehicle-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .status-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        padding: 0.25rem 0.75rem;
        border-radius: 999px;
        color: white;
        font-size: 0.875rem;
    }

    .status-badge.available { background-color: #2ecc71; }
    .status-badge.rented { background-color: #e74c3c; }
    /*.status-badge.maintenance { background-color: #f1c40f; }*/

    .vehicle-info {
        padding: 1rem;
    }

    /*.plate {*/
    /*    color: #7f8c8d;*/
    /*    font-size: 0.875rem;*/
    /*}*/

    .specs {
        display: flex;
        gap: 1rem;
        margin-top: 0.5rem;
        color: #34495e;
        font-size: 0.875rem;
    }

    .vehicle-actions {
        display: flex;
        gap: 0.5rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .action-btn {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
        font-size: 0.875rem;
    }

    .action-btn:hover {
        background-color: #f1f2f6;
    }

    .action-btn.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-controls {
        position: fixed;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        gap: 1rem;
        background-color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>