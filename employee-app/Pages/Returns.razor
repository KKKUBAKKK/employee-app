@page "/returns"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using employee
@using employeeapp.Dtos
@using employeeapp.Helpers
@using employeeapp.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IRentalService RentalService
@inject ICarService CarService
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorageService

<div class="page-header">
    <h1>Vehicle Returns</h1>
    <div class="header-actions">
        @* <button class="scan-button"> *@
        @*     <i class="fas fa-qr-code"></i> Scan QR Code *@
        @* </button> *@
    </div>
</div>

<div class="returns-container">
    <div class="pending-returns card">
        <h2>Pending Returns Today</h2>
        <div class="returns-list">
            @foreach (var rental in pendingReturns)
            {
                <div class="return-item @(selectedReturn?.rental.Id == rental.rental.Id ? "selected" : "")" 
                     @onclick="() => SelectReturn(rental)">
                    <div class="return-time">
                        <span class="time">@rental.rental.EndDate.ToString("d")</span>
                    </div>
                    <div class="return-info">
                        <h3>@rental.car.Producer @rental.car.Model</h3>
                        <p class="plate">@rental.car.RentalService</p>
                        <p class="customer">@rental.rental.EndLocation</p>
                    </div>
                    <i class="fas fa-chevron-right"></i>
                </div>
            }
        </div>
    </div>

    <div class="return-process card @(selectedReturn == null ? "empty" : "")">
        @if (selectedReturn == null)
        {
            <div class="empty-state">
                <i class="fas fa-car fa-3x"></i>
                <h3>Select a Return</h3>
                <p>Choose a pending return from the list to begin processing</p>
            </div>
        }
        else
        {
            <div class="return-header">
                <div class="vehicle-details">
                    @* <h2>@selectedReturn.VehicleModel</h2> *@
                    @* <p class="plate">@selectedReturn.LicensePlate</p> *@
                </div>
                <button class="close-btn" @onclick="ClearSelection">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="return-form">
                <EditForm Model="@returnForm" OnValidSubmit="CompleteReturn">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="validation-summary" />

                    <div class="form-section">
                        <h3>Vehicle Condition</h3>
                        
                        <div class="photo-upload-grid">
                            <div class="photo-upload">
                                <label>Front View</label>
                                <div class="upload-area @(frontPhotoUploaded ? "has-image" : "")">
                                    @if (frontPhotoUploaded)
                                    {
                                        <img src="@returnForm.FrontPhotoUrl" alt="Front view"/>
                                        <button class="remove-photo" @onclick="@(() => RemovePhoto("front"))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <InputFile OnChange="@((e) => UploadPhoto(e, "front"))"/>
                                        <i class="fas fa-camera"></i>
                                        <span>Add Photo</span>
                                    }
                                </div>
                            </div>

                            <div class="photo-upload">
                                <label>Right Side</label>
                                <div class="upload-area @(rightPhotoUploaded ? "has-image" : "")">
                                    @if (rightPhotoUploaded)
                                    {
                                        <img src="@returnForm.RightPhotoUrl" alt="Right side"/>
                                        <button class="remove-photo" @onclick="@(() => RemovePhoto("right"))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <InputFile OnChange="@((e) => UploadPhoto(e, "right"))"/>
                                        <i class="fas fa-camera"></i>
                                        <span>Add Photo</span>
                                    }
                                </div>
                            </div>

                            <div class="photo-upload">
                                <label>Left Side</label>
                                <div class="upload-area @(leftPhotoUploaded ? "has-image" : "")">
                                    @if (leftPhotoUploaded)
                                    {
                                        <img src="@returnForm.LeftPhotoUrl" alt="Left side"/>
                                        <button class="remove-photo" @onclick="@(() => RemovePhoto("left"))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <InputFile OnChange="@((e) => UploadPhoto(e, "left"))"/>
                                        <i class="fas fa-camera"></i>
                                        <span>Add Photo</span>
                                    }
                                </div>
                            </div>

                            <div class="photo-upload">
                                <label>Back View</label>
                                <div class="upload-area @(backPhotoUploaded ? "has-image" : "")">
                                    @if (backPhotoUploaded)
                                    {
                                        <img src="@returnForm.BackPhotoUrl" alt="Back view"/>
                                        <button class="remove-photo" @onclick="@(() => RemovePhoto("back"))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <InputFile OnChange="@((e) => UploadPhoto(e, "back"))"/>
                                        <i class="fas fa-camera"></i>
                                        <span>Add Photo</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="condition-grid">
                            <div class="condition-item">
                                <label>Return Date</label>
                                <InputDate @bind-Value="returnForm.ReturnDate" class="form-control"/>
                                <ValidationMessage For="@(() => returnForm.ReturnDate)" class="validation-message" />
                            </div>

                            <div class="condition-item">
                                <label>Vehicle Condition</label>
                                <InputSelect @bind-Value="returnForm.Condition" class="form-control">
                                    <option value="">Select condition...</option>
                                    <option value="Excellent">Excellent</option>
                                    <option value="Good">Good</option>
                                    <option value="Fair">Fair</option>
                                    <option value="Poor">Poor</option>
                                    <option value="Damaged">Damaged</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => returnForm.Condition)" class="validation-message" />
                            </div>

                            <div class="damage-notes">
                                <label>Damage Notes</label>
                                <InputTextArea @bind-Value="returnForm.EmployeeNotes"
                                               placeholder="Describe any new damage or issues..."
                                               rows="4"
                                               class="form-control"/>
                                <ValidationMessage For="@(() => returnForm.EmployeeNotes)" class="validation-message" />
                            </div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="secondary-btn" @onclick="ClearSelection">
                            Cancel
                        </button>
                        <button type="submit" class="primary-btn">
                            Complete Return
                        </button>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</div>

@code {
    
    private List<RentalReturnInfo> pendingReturns = new();
    private int employeeId = 1;

    protected override async Task OnInitializedAsync()
    {
        var rentals = await RentalService.GetPendingReturns();
        var cars = await CarService.GetAllCars();
        pendingReturns = rentals.Select(r =>
        {
            var c = cars.Where(c => (c.Id == r.CarId)).FirstOrDefault();
            return new RentalReturnInfo
            {
                rental = r,
                car = c
            };
        }).ToList();
        
        var employeeIdString = await LocalStorageService.GetItemAsync<string>("employeeId");
        if (!string.IsNullOrEmpty(employeeIdString))
        {
            employeeId = int.Parse(employeeIdString);
        }
    }

    private RentalReturnInfo? selectedReturn;
    private ReturnForm returnForm = new();
    private bool frontPhotoUploaded = false;
    private bool backPhotoUploaded = false;
    private bool rightPhotoUploaded = false;
    private bool leftPhotoUploaded = false;

    private void SelectReturn(RentalReturnInfo rental)
    {
        selectedReturn = rental;
        returnForm = new ReturnForm(); // Reset form
    }

    private void ClearSelection()
    {
        selectedReturn = null;
        returnForm = new ReturnForm();
    }
    
    private async Task TriggerFileUpload(string position)
    {
        var inputId = position switch
        {
            "front" => "fileInputFront",
            "back" => "fileInputBack",
            "left" => "fileInputLeft",
            "right" => "fileInputRight",
            _ => throw new ArgumentException("Invalid position", nameof(position))
        };

        // await JSRuntime.InvokeVoidAsync("document.getElementById", inputId);
        // await JSRuntime.InvokeVoidAsync("click");
        await JSRuntime.InvokeVoidAsync("triggerFileInputClick", inputId);
    }
    
    private async Task UploadPhoto(InputFileChangeEventArgs e, string position)
    {
        var file = e.File;
        var allowedContentTypes = new[] { "image/jpeg", "image/jpg", "image/png" };
        if (!allowedContentTypes.Contains(file.ContentType))
        {
            // Handle unsupported file type
            return;
        }
        
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        var base64 = Convert.ToBase64String(buffer);
        var imageUrl = $"data:{file.ContentType};base64,{base64}";

        if (position == "front")
        {
            returnForm.FrontPhotoUrl = imageUrl;
            frontPhotoUploaded = true;
        }
        else if (position == "back")
        {
            returnForm.BackPhotoUrl = imageUrl;
            backPhotoUploaded = true;
        }
        else if (position == "right")
        {
            returnForm.RightPhotoUrl = imageUrl;
            rightPhotoUploaded = true;
        }
        else if (position == "left")
        {
            returnForm.LeftPhotoUrl = imageUrl;
            leftPhotoUploaded = true;
        }
        
        StateHasChanged();
    }

    private void RemovePhoto(string position)
    {
        if (position == "front")
        {
            frontPhotoUploaded = false;
            returnForm.FrontPhotoUrl = "";
        }
        else if (position == "back")
        {
            backPhotoUploaded = false;
            returnForm.BackPhotoUrl = "";
        }
        else if (position == "right")
        {
            rightPhotoUploaded = false;
            returnForm.RightPhotoUrl = "";
        }
        else if (position == "left")
        {
            leftPhotoUploaded = false;
            returnForm.LeftPhotoUrl = "";
        }
        
    }

    private async Task CompleteReturn()
    {
        var returnDto = new ReturnRecordDto();

        returnDto.EmployeeID = employeeId;
        returnDto.RentalId = selectedReturn.rental.Id;
        returnDto.Condition = returnForm.Condition;
        returnDto.FrontPhotoUrl = returnForm.FrontPhotoUrl;
        returnDto.BackPhotoUrl = returnForm.BackPhotoUrl;
        returnDto.RightPhotoUrl = returnForm.RightPhotoUrl;
        returnDto.LeftPhotoUrl = returnForm.LeftPhotoUrl;
        returnDto.EmployeeNotes = returnForm.EmployeeNotes;
        returnDto.ReturnDate = returnForm.ReturnDate;
        
        await RentalService.CompleteReturn(returnDto);
        
        ClearSelection();
        await OnInitializedAsync();
        StateHasChanged();
        // await JSRuntime.InvokeVoidAsync("refreshPage");
    }

    public class RentalReturnInfo
    {
        public RentalDto rental { get; set; }
        public CarDto car { get; set; }
    }
    //
    public class ReturnForm
    {
        [Required(ErrorMessage = "Please select a vehicle condition")]
        public string Condition { get; set; } = "";
        [Required(ErrorMessage = "Front photo is required")]
        public string FrontPhotoUrl { get; set; } = "";
        [Required(ErrorMessage = "Back photo is required")]
        public string BackPhotoUrl { get; set; } = "";
        [Required(ErrorMessage = "Right side photo is required")]
        public string RightPhotoUrl { get; set; } = "";
        [Required(ErrorMessage = "Left side photo is required")]
        public string LeftPhotoUrl { get; set; } = "";
        [Required(ErrorMessage = "Please provide notes about the vehicle condition")]
        public string EmployeeNotes { get; set; } = "";
        [Required(ErrorMessage = "Return date is required")]
        public DateTime ReturnDate { get; set; } = DateTime.Today;
    }
}

<style>
    .returns-container {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 1.5rem;
        height: calc(100vh - 180px);
    }

    .card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 1.5rem;
        height: 100%;
    }

    .scan-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .returns-list {
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        overflow-y: auto;
        max-height: calc(100% - 3rem);
    }

    .return-item {
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: all 0.2s;
    }
    .hidden {
        display: none;
    }

    .return-item:hover {
        background-color: #f8f9fa;
    }

    .return-item.selected {
        border-color: #3498db;
        background-color: #ebf8ff;
    }

    .return-time {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 80px;
    }

    .time {
        font-size: 1.125rem;
        font-weight: 500;
    }

    .status-delayed { color: #e74c3c; }
    .status-ontime { color: #2ecc71; }

    .return-info {
        flex: 1;
    }

    .return-info h3 {
        margin: 0;
        font-size: 1rem;
    }

    .plate {
        color: #7f8c8d;
        font-size: 0.875rem;
        margin: 0.25rem 0;
    }

    .customer {
        font-size: 0.875rem;
        margin: 0;
    }

    .empty-state {
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #a0aec0;
        text-align: center;
    }

    .validation-summary {
        color: #e74c3c;
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #fdf2f2;
        border-radius: 4px;
        border: 1px solid #fbd5d5;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .form-control.invalid {
        border-color: #e74c3c;
    }

    .condition-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .damage-notes {
        grid-column: 1 / -1;  /* This makes it span all columns */
        margin-top: 1rem;     /* Add some space between the inputs above */
    }

    .return-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 2rem;
    }

    .close-btn {
        background: none;
        border: none;
        color: #64748b;
        cursor: pointer;
        padding: 0.5rem;
    }

    .form-section {
        margin-bottom: 2rem;
    }

    .form-section h3 {
        margin-bottom: 1rem;
        color: #2d3748;
    }

    .condition-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .condition-item {
        position: relative;
    }

    .unit {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #64748b;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .photo-upload-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .upload-area {
        width: 100%;
        aspect-ratio: 1;
        border: 2px dashed #ddd;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        position: relative;
    }

    .upload-area:hover {
        border-color: #3498db;
        color: #3498db;
    }

    .upload-area.has-image {
        border-style: solid;
        justify-content: flex-start;
    }

    .upload-area img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .upload-area i,
    .upload-area span {
        display: block;
        text-align: center;
    }

    .upload-area input[type="file"] {
        opacity: 0;
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        cursor: pointer;
        z-index: 1;
    }

    .upload-area .upload-content {
        position: relative;
        z-index: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        pointer-events: none;
    }

    .remove-photo {
        position: absolute;
        top: -0.5rem;
        right: -0.5rem;
        background: #e74c3c;
        color: white;
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
    }

    .damage-notes {
        margin-top: 1rem;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
    }

    .primary-btn {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
    }

    .secondary-btn {
        background-color: white;
        color: #64748b;
        border: 1px solid #ddd;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        cursor: pointer;
    }
</style>